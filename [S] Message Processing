/*
Потребно е да направите сценарио за синхронизација на процесирање на пораки. Притоа треба да имате еден процесор (Processor) и
50 извори на пораките (MessageSource).

Процесорот е паузиран се додека не се насоберат 5 пораки од изворите. Кога ќе се насоберат 5 пораки, петтиот извор на порака го
активира процесорот и тој започнува да обработува пораките. При активирањето, процесорот печати Activated processing.
Штом процесорот ќе ги обработи пораките од сите извори, тој повторно паузира. Кога процесорот е активен, тој најпрво бара
порака од еден од изворите со печатење на Request message. Кога пораката ќе биде спремна, изворот печати Provide message,
по што почнува нејзината обработка. Откако пораката е обработена, изворот печати Message delivered. Leaving, по што завршува
неговата работа во позадина. Доколку нема наредена порака од некој од изворите, процесорот паузира со печатење на Processing pause.
Доколку процесорот е паузиран, изворите треба да чекаат додека не се соберат 5 пораки, и петтиот треба да го активира процесорот.

Во почетниот код кој е даден, дефинирани се класите Processor и MessageSource, кои ги симболизираат процесорот и изворите на пораките.
Има само една инстанца од класата Processor кај која методот execute() се повикува 50 пати и 50 инстанци од класата MessageSource во
кои методот execute() се повикува само еднаш.

Вашата задача е да ги имплементирате методите execute() од класите Processor и MessageSource според претходно опшаното сценарио.

Потребно е да имплементирате сценарио во кое во main методот ќе се стартуваат 50 инстанци од класите MessageSource и една инстанца
од Processor кои ќе се однесуваат како Threads и во позадина секоја ќе се однесува според претходно опишаното сценарио.
Откако ќе се стартуваат процесорот и изворите на пораки, треба за секој од нив да се почека да заврши за максимум 1 секунда (1000 ms).
Потоа треба да се провери дали сите инстанци се завршени со позадинското извршување. Доколку некоја инстанца не е завршена,
потребно е истата да се терминира и да се испечати пораката: Possible deadlock.

Имплементацијата на сценариото треба да се направи во execute методите, кои треба да се стартуваат во позадина.
*/

import java.util.HashSet;
import java.util.concurrent.Semaphore;

public class MessageProcessing {

    public static void main(String[] args) throws InterruptedException {
        HashSet<Thread> threads = new HashSet<Thread>();
        for (int i = 0; i < 50; i++) {
            MessageSource ms = new MessageSource();
            threads.add(ms);
        }
        threads.add(new Processor());

        // start all threads in background
        for(Thread t : threads)
            t.start();

        // after all of them are started, wait each of them to finish for 1_000 ms
        for(Thread t : threads)
            t.join(1_000);

        // after the waiting for each of the players is done, check the one that are not finished and terminate them
        for(Thread t : threads){
            if(t.isAlive()){
                t.interrupt();
                System.err.println("Possible deadlock");
            }
        }
    }

    public static boolean isAwake = false;
    public static int readyMessages = 0;
    public static Semaphore lock = new Semaphore(1);
    public static Semaphore requestMessage = new Semaphore(0);
    public static Semaphore waitMessages = new Semaphore(0);
    public static Semaphore allowProcessing = new Semaphore(0);
    public static Semaphore processingDone = new Semaphore(0);

    public static class Processor extends Thread {

        public void run() {
            try{
                execute();
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }

        public void execute() throws InterruptedException {
            int processedMessages=0;

            while(processedMessages < 50) {

                if(!isAwake) {
                    if(readyMessages>=5) {
                        System.out.println("Activate processing");
                        isAwake = true;
                    }
                    else{
                        waitMessages.acquire();
                        System.out.println("Activate processing");
                        isAwake = true;
                    }
                }

                System.out.println("Request message");
                requestMessage.release();
                // when the messasge is provided, process it
                allowProcessing.acquire();
                System.out.println("Process message");
                processedMessages++;
                processingDone.release();

                Thread.sleep(200);
                // if there are no more ready messages, pause the processing
                if(readyMessages == 0) {
                    System.out.println("Processing pause");
                    isAwake = false;
                } else {
                    isAwake = true;
                }
            }
        }

    }

    public static class MessageSource extends Thread {

        public void run() {
            try{
                execute();
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }

        public void execute() throws InterruptedException {
            Thread.sleep(50);
            System.out.println("Message ready");
            lock.acquire();
            readyMessages++;
            if(readyMessages >= 5) {
                if(!isAwake)
                    waitMessages.release();
            }
            lock.release();

            // wait until the processor requests the message
            requestMessage.acquire();
            System.out.println("Provide message");
            lock.acquire();
            readyMessages--;
            lock.release();
            allowProcessing.release();
            // wait until the processor is done with the processing of the message
            processingDone.acquire();
            System.out.println("Message delivered. Leaving.");
        }

    }
}
