/*
Потребно е да извршите симулација за пренесување на затвореници со автомобил. Автомобилите вршат превоз на точно 4 патници,
при што не е дозволено заедно да се возат еден полицаец и 3 затвореници. Сите други комбинации се дозволени.
Превозот се одвива според следните правила:

Не е дозволено да влезат еден полицаец и 3 затвореници во автомобилот
Автомобилот врши превоз кога ќе се соберат точно 4 патници
Кога ќе се соберат 4 патници, еден од полицајците треба да издаде команда за тргнување преку печатење на пораката
Start driving.
Слегувањето од автомобилот е дозволено откако еден од полицајците ќе ја издаде соодветната команда преку печатење на пораката Arrived.
Секој се вози само еднаш
Потоа сценариото може да започне од почеток
Во почетниот код кој е даден, дефинирани се класите Policeman и Criminal,
кои го симболизираат однесувањето на полицајците и затворениците.

Главниот метод CriminalTransport.main треба да стартува по 60 Policeman и Criminal thread-ови.
Потоа main методот треба да чека најмногу 1000ms за секој Policeman и Criminal thread да заврши.
Доколку некој не заврши за ова време, треба да се прекине и да се испише порака Terminated transport,
а во спротивен случај да се испише Finished transport.

Класите Policeman и Criminal треба да се Thread, кои во позадина го извршуваат execute методот само еднаш.

Вашата задача е да го дополните дадениот код според барањата на задачата, при што треба да внимавате да не настане Race Condition
и Deadlock.
*/

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.Semaphore;

public class CriminalTransport {

    public static void main(String[] args) throws InterruptedException {
        HashSet<Thread> threads = new HashSet<Thread>();
        for (int i = 0; i < 60; i++) {
            Policeman red = new Policeman();
            threads.add(red);
            Criminal green = new Criminal();
            threads.add(green);
        }

        // run all threads in background
        for(Thread t : threads)
            t.start();

        // after all of them are started, wait each of them to finish for maximum 1_000 ms
        for(Thread t : threads)
            t.join(1_000);

        // for each thread, terminate it if it is not finished
        boolean interruptedMessages = false;
        for(Thread t : threads){
            if(t.isAlive()){
                t.interrupt();
                interruptedMessages = true;
            }
        }
        if(interruptedMessages)
            System.err.println("Terminated transport");
        else
            System.out.println("Finished transport");
    }

    public static Semaphore lock = new Semaphore(1);
    public static Semaphore allowSit = new Semaphore(4);
    public static Semaphore allowCriminals = new Semaphore(2);
    public static Semaphore allowPoliceMen = new Semaphore(3);
    public static Semaphore allowDriving = new Semaphore(0);
    public static Semaphore allowExit = new Semaphore(0);
    public static boolean flag = true;
    public static int numberOfCriminals = 0;
    public static int numberOfPolicemen = 0;

    public static class Policeman extends Thread {

        public void run(){
            try{
                execute();
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }

        public void execute() throws InterruptedException {

            // waits until it is valid to enter the car
            allowPoliceMen.acquire();
            allowSit.acquire();
            System.out.println("Policeman enters in the car");

            lock.acquire();
            numberOfPolicemen++;
            if(numberOfCriminals + numberOfPolicemen == 4) {
                allowDriving.release(numberOfPolicemen);
            }
            lock.release();

            // when the four passengers are inside, one policeman prints the starting command
            allowDriving.acquire();
            lock.acquire();
            if(flag) {
                flag = false;
                System.out.println("Start driving.");
                Thread.sleep(100);
                // one policeman prints the this command to notice that everyone can exit
                System.out.println("Arrived.");
                allowExit.release(4);
                numberOfPolicemen = 0;
                numberOfCriminals = 0;
            }
            lock.release();

            // the exit from the car is allowed after the "Arrived." message is printed
            allowExit.acquire();
            System.out.println("Policeman exits from the car");
            lock.acquire();
            numberOfPolicemen++;
            if(numberOfPolicemen + numberOfCriminals == 4){
                allowPoliceMen.release(numberOfPolicemen);
                allowCriminals.release(numberOfCriminals);
                allowSit.release(4);
                numberOfCriminals = 0;
                numberOfPolicemen = 0;
                flag = true;
            }
            lock.release();
        }

    }

    public static class Criminal extends Thread {

        public void run(){
            try{
                execute();
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }

        public void execute() throws InterruptedException {

            // waits until it is valid to enter the car
            allowCriminals.acquire();
            allowSit.acquire();
            System.out.println("Criminal enters in the car");

            lock.acquire();
            numberOfCriminals++;
            if(numberOfCriminals + numberOfPolicemen == 4) {
                allowDriving.release(numberOfPolicemen);
            }
            lock.release();
            Thread.sleep(100);

            // the exit from the car is allowed after the "Arrived." message is printed
            allowExit.acquire();
            System.out.println("Criminal exits from the car");
            lock.acquire();
            numberOfCriminals++;
            if(numberOfPolicemen + numberOfCriminals == 4){
                allowPoliceMen.release(numberOfPolicemen);
                allowCriminals.release(numberOfCriminals);
                allowSit.release(4);
                numberOfCriminals = 0;
                numberOfPolicemen = 0;
                flag = true;
            }
            lock.release();
        }
    }

}
